function BER = runPlutoradioQPSKTransmitAndReceiver(prmQPSKRadio, useScopes, printData)

%   Copyright 2017 The MathWorks, Inc.

persistent tx rx qpskScopes;

if isempty(tx)
    tx = QPSKTransmitter(...
        'UpsamplingFactor',             prmQPSKRadio.Interpolation, ...
        'RolloffFactor',                prmQPSKRadio.RolloffFactor, ...
        'RaisedCosineFilterSpan',       prmQPSKRadio.RaisedCosineFilterSpan, ...
        'MessageBits',                  prmQPSKRadio.MessageBits, ...
        'MessageLength',                prmQPSKRadio.MessageLength, ...
        'NumberOfMessage',              prmQPSKRadio.NumberOfMessage, ...
        'ScramblerBase',                prmQPSKRadio.ScramblerBase, ...
        'ScramblerPolynomial',          prmQPSKRadio.ScramblerPolynomial, ...
        'ScramblerInitialConditions',   prmQPSKRadio.ScramblerInitialConditions);
end
    
if isempty(rx)
    rx  = QPSKReceiver(...
        'ModulationOrder',                      prmQPSKRadio.ModulationOrder, ...
        'SampleRate',                           prmQPSKRadio.Fs, ...
        'DecimationFactor',                     prmQPSKRadio.Decimation, ...
        'FrameSize',                            prmQPSKRadio.FrameSize, ...
        'HeaderLength',                         prmQPSKRadio.HeaderLength, ...
        'NumberOfMessage',                      prmQPSKRadio.NumberOfMessage, ...
        'PayloadLength',                        prmQPSKRadio.PayloadLength, ...
        'DesiredPower',                         prmQPSKRadio.DesiredPower, ...
        'AveragingLength',                      prmQPSKRadio.AveragingLength, ...
        'MaxPowerGain',                         prmQPSKRadio.MaxPowerGain, ...
        'RolloffFactor',                        prmQPSKRadio.RolloffFactor, ...
        'RaisedCosineFilterSpan',               prmQPSKRadio.RaisedCosineFilterSpan, ...
        'InputSamplesPerSymbol',                prmQPSKRadio.Interpolation, ...
        'MaximumFrequencyOffset',               prmQPSKRadio.MaximumFrequencyOffset, ...
        'PostFilterOversampling',               prmQPSKRadio.Interpolation/prmQPSKRadio.Decimation, ...
        'PhaseRecoveryLoopBandwidth',           prmQPSKRadio.PhaseRecoveryLoopBandwidth, ...
        'PhaseRecoveryDampingFactor',           prmQPSKRadio.PhaseRecoveryDampingFactor, ...
        'TimingRecoveryDampingFactor',          prmQPSKRadio.TimingRecoveryDampingFactor, ...
        'TimingRecoveryLoopBandwidth',          prmQPSKRadio.TimingRecoveryLoopBandwidth, ...
        'TimingErrorDetectorGain',              prmQPSKRadio.TimingErrorDetectorGain, ...
        'PreambleDetectorThreshold',            prmQPSKRadio.PreambleDetectorThreshold, ...
        'DescramblerBase',                      prmQPSKRadio.ScramblerBase, ...
        'DescramblerPolynomial',                prmQPSKRadio.ScramblerPolynomial, ...
        'DescramblerInitialConditions',         prmQPSKRadio.ScramblerInitialConditions,...
        'BerMask',                              prmQPSKRadio.BerMask, ...
        'PrintOption',                          printData);
    
    if useScopes
        % Create the System object for plotting all the scopes
        sampleRate = prmQPSKRadio.Rsym*prmQPSKRadio.Interpolation/prmQPSKRadio.Decimation;
        qpskScopes = QPSKScopes('SampleRate', sampleRate);
    end
end

% Initialize variables
currentTime = 0;
BER = [];
rcvdSignal = complex(zeros(prmQPSKRadio.PlutoFrameLength,1));
    
% Create and configure the Pluto System object.
radio_tx = sdrtx('Pluto');
radio_tx.RadioID               = prmQPSKRadio.Address;
radio_tx.CenterFrequency       = prmQPSKRadio.PlutoCenterFrequency;
radio_tx.BasebandSampleRate    = prmQPSKRadio.PlutoFrontEndSampleRate;
radio_tx.SamplesPerFrame       = prmQPSKRadio.PlutoFrameLength;
radio_tx.Gain                  = 0;

radio_rx = sdrrx('Pluto');
radio_rx.RadioID               = prmQPSKRadio.Address;
radio_rx.CenterFrequency       = prmQPSKRadio.PlutoCenterFrequency;
radio_rx.BasebandSampleRate    = prmQPSKRadio.PlutoFrontEndSampleRate;
radio_rx.SamplesPerFrame       = prmQPSKRadio.PlutoFrameLength;
radio_rx.GainSource            = 'Manual';
radio_rx.Gain                  = prmQPSKRadio.PlutoGain;
radio_rx.OutputDataType        = 'double';
    
% Bit generation, modulation and transmission filtering
data = step(tx);

% Data transmission on repeat
radio_tx.transmitRepeat(data)

while currentTime <  prmQPSKRadio.StopTime
    
    % Receive signal from the radio
    rcvdSignal = radio_rx();
    
    % Decode the received message
    [RCRxSignal, timingRecSignal, freqRecSignal, BER] = rx(rcvdSignal);
    
    if useScopes
        % Plots all the scopes
        qpskScopes(rcvdSignal, RCRxSignal,timingRecSignal, freqRecSignal);
    end
    
    % Update simulation time
    currentTime=currentTime+(radio_rx.SamplesPerFrame / radio_rx.BasebandSampleRate);
end

release(rx);
release(tx);
if useScopes
    release(qpskScopes);
end

end
