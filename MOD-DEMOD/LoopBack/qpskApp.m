
function qpskApp(message)

myStruct = myStructInit(message);
[messageBits, berMask] = initMessage(message,myStruct.MessageLength,myStruct.NumberOfMessage);

printData = true;

% Copyright 2012-2017 The MathWorks, Inc.

%#codegen

persistent qpskTx qpskRx
coder.extrinsic('createQPSKScopes','runQPSKScopes','releaseQPSKScopes')
if isempty(qpskTx)
    % Initialize the components
    % Create and configure the transmitter System object
    qpskTx = QPSKTransmitter(...
        'UpsamplingFactor',                     myStruct.Interpolation, ...
        'RolloffFactor',                        myStruct.RolloffFactor, ...
        'RaisedCosineFilterSpan',               myStruct.RaisedCosineFilterSpan, ...
        'MessageBits',                          messageBits, ...
        'MessageLength',                        myStruct.MessageLength, ...
        'NumberOfMessage',                      myStruct.NumberOfMessage, ...
        'ScramblerBase',                        myStruct.ScramblerBase, ...
        'ScramblerPolynomial',                  myStruct.ScramblerPolynomial, ...
        'ScramblerInitialConditions',           myStruct.ScramblerInitialConditions);

    % Create and configure the receiver System object
    qpskRx = QPSKReceiver(...
        'ModulationOrder',                      myStruct.ModulationOrder, ...
        'SampleRate',                           myStruct.Fs, ...
        'DecimationFactor',                     myStruct.Decimation, ...
        'FrameSize',                            myStruct.FrameSize, ...
        'HeaderLength',                         myStruct.HeaderLength, ...
        'NumberOfMessage',                      myStruct.NumberOfMessage, ...
        'PayloadLength',                        myStruct.PayloadLength, ...
        'DesiredPower',                         myStruct.DesiredPower, ...
        'AveragingLength',                      myStruct.AveragingLength, ...
        'MaxPowerGain',                         myStruct.MaxPowerGain, ...
        'RolloffFactor',                        myStruct.RolloffFactor, ...
        'RaisedCosineFilterSpan',               myStruct.RaisedCosineFilterSpan, ...
        'InputSamplesPerSymbol',                myStruct.Interpolation, ...
        'MaximumFrequencyOffset',               myStruct.MaximumFrequencyOffset, ...
        'PostFilterOversampling',               myStruct.Interpolation/myStruct.Decimation, ...
        'PhaseRecoveryLoopBandwidth',           myStruct.PhaseRecoveryLoopBandwidth, ...
        'PhaseRecoveryDampingFactor',           myStruct.PhaseRecoveryDampingFactor, ...
        'TimingRecoveryDampingFactor',          myStruct.TimingRecoveryDampingFactor, ...
        'TimingRecoveryLoopBandwidth',          myStruct.TimingRecoveryLoopBandwidth, ...
        'TimingErrorDetectorGain',              myStruct.TimingErrorDetectorGain, ...
        'PreambleDetectorThreshold',            myStruct.PreambleDetectorThreshold, ...    
        'DescramblerBase',                      myStruct.ScramblerBase, ...
        'DescramblerPolynomial',                myStruct.ScramblerPolynomial, ...
        'DescramblerInitialConditions',         myStruct.ScramblerInitialConditions,...
        'BerMask',                              berMask, ...
        'pMessage',                             message, ...
        'pMessageLength',                       myStruct.MessageLength, ...
        'PrintOption',                          printData);
end

qpskRx.PrintOption = printData;
transmittedSignal = coder.nullcopy(complex(14000,1));

if coder.target('MATLAB')
    % Create and configure the Pluto System object.
%     radio_tx = sdrtx('Pluto');
%     radio_tx.RadioID               = myStruct.Address;
%     radio_tx.CenterFrequency       = myStruct.PlutoCenterFrequency;
%     radio_tx.BasebandSampleRate    = myStruct.PlutoFrontEndSampleRate;
%     radio_tx.SamplesPerFrame       = myStruct.PlutoFrameLength;
%     radio_tx.Gain                  = 0;
%     % 
%     radio_rx = sdrrx('Pluto');
%     radio_rx.RadioID               = myStruct.Address;
%     radio_rx.CenterFrequency       = myStruct.PlutoCenterFrequency;
%     radio_rx.BasebandSampleRate    = myStruct.PlutoFrontEndSampleRate;
%     radio_rx.SamplesPerFrame       = myStruct.PlutoFrameLength;
%     radio_rx.GainSource            = 'Manual';
%     radio_rx.Gain                  = myStruct.PlutoGain;
%     radio_rx.OutputDataType        = 'double';
end

transmittedSignal = qpskTx();                                         % Transmitter
if coder.target('MATLAB')
    % Data transmission on repeat
%     radio_tx.transmitRepeat(transmittedSignal);
end

  
for count = 1:myStruct.TotalFrame
    
    if coder.target('MATLAB')
        %rcvdSignal = radio_rx();
        rcvdSignal = transmittedSignal;
    else 
        rcvdSignal = transmittedSignal;
    end
    [RCRxSignal, timingRecSignal, freqRecSignal, DataRecovered, BER] = qpskRx(rcvdSignal); % Receiver
end

if isempty(coder.target)
    release(qpskTx);
    release(qpskRx);
end
